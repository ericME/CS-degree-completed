        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 815 returned 100% blocks executed 100%
        -:    6:char inputChar()
        -:    7:{
     1630:    8:    char alphabet[] = {'[','(','{',' ','a','x','}',')',']'};
        -:    9:
        -:   10:    
      815:   11:    return alphabet[rand()%sizeof(alphabet)];
        -:   12:}
        -:   13:
        -:   14:
        -:   15:
function inputString called 815 returned 100% blocks executed 100%
        -:   16:char * inputString()
        -:   17:{
     1630:   18:    char alphabet[] = {'r','e','s','t'};
      815:   19:    char * returnVal = (char*)calloc(6, sizeof(char));
      815:   20:    int i;
      815:   21:    returnVal[5] = '\0';
     9780:   22:    for (i = 0; i < 5; i++){
branch  0 taken 83%
branch  1 taken 17%
     4075:   23:      returnVal[i] = alphabet[rand()%(sizeof(alphabet)+1)];
     4075:   24:    }
        -:   25:    //TEST CODE to make sure the function completes.
        -:   26:    // returnVal[0] = alphabet[0];
        -:   27:    // returnVal[1] = alphabet[1];
        -:   28:    // returnVal[2] = alphabet[2];
        -:   29:    // returnVal[3] = alphabet[1];
        -:   30:    // returnVal[4] = alphabet[3]; 
      815:   31:    return returnVal; 
        -:   32:}
        -:   33:
function testme called 1 returned 0% blocks executed 94%
        -:   34:void testme()
        -:   35:{
        2:   36:  int tcCount = 0;
        1:   37:  char *s;
        1:   38:  char c;
        1:   39:  int state = 0;
        1:   40:  while (1)
        -:   41:  {
      815:   42:    tcCount++;
      815:   43:    c = inputChar();
      815:   44:    s = inputString();
      815:   45:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
        -:   46:
      890:   47:    if (c == '[' && state == 0) state = 1;
branch  0 taken 9%
branch  1 taken 91%
branch  2 taken 1%
branch  3 taken 99%
      923:   48:    if (c == '(' && state == 1) state = 2;
branch  0 taken 13%
branch  1 taken 87%
branch  2 taken 1%
branch  3 taken 99%
      910:   49:    if (c == '{' && state == 2) state = 3;
branch  0 taken 12%
branch  1 taken 88%
branch  2 taken 1%
branch  3 taken 99%
      893:   50:    if (c == ' ' && state == 3) state = 4;
branch  0 taken 9%
branch  1 taken 91%
branch  2 taken 1%
branch  3 taken 99%
      923:   51:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 13%
branch  1 taken 87%
branch  2 taken 1%
branch  3 taken 99%
      900:   52:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 1%
branch  3 taken 99%
      898:   53:    if (c == '}' && state == 6) state = 7;
branch  0 taken 10%
branch  1 taken 90%
branch  2 taken 1%
branch  3 taken 99%
      916:   54:    if (c == ')' && state == 7) state = 8;
branch  0 taken 12%
branch  1 taken 88%
branch  2 taken 1%
branch  3 taken 99%
      906:   55:    if (c == ']' && state == 8) state = 9;
branch  0 taken 11%
branch  1 taken 89%
branch  2 taken 1%
branch  3 taken 99%
     1007:   56:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 18%
branch  1 taken 82%
branch  2 taken 25%
branch  3 taken 75%
branch  4 taken 14%
branch  5 taken 86%
branch  6 taken 20%
branch  7 taken 80%
branch  8 taken 100%
branch  9 taken 0%
branch 10 taken 100%
branch 11 taken 0%
branch 12 taken 100%
branch 13 taken 0%
        -:   57:       && s[2] == 's' && s[3] == 'e'
        -:   58:       && s[4] == 't' && s[5] == '\0'
        -:   59:       && state == 9)
        -:   60:    {
        1:   61:      printf("error ");
        1:   62:      exit(200);
        -:   63:    }
      814:   64:    free(s);
      814:   65:  }
    #####:   66:}
        -:   67:
        -:   68:
function main called 1 returned 100% blocks executed 100%
        1:   69:int main(int argc, char *argv[])
        -:   70:{
        1:   71:    srand(time(NULL));
        1:   72:    testme();
        1:   73:    return 0;
        -:   74:}
