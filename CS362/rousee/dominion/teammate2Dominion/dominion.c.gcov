        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:120
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 80670 returned 100% blocks executed 100%
    80670:    8:int compare(const void* a, const void* b) {
    80670:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1%
branch  1 taken 99%
       45:   10:    return 1;
    80625:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
    28770:   12:    return -1;
    51855:   13:  return 0;
    80670:   14:}
        -:   15:
function newGame called 2955 returned 100% blocks executed 100%
        -:   16:struct gameState* newGame() {
     5910:   17:  struct gameState* g = malloc(sizeof(struct gameState));
     2955:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 15 returned 100% blocks executed 100%
       15:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
       15:   22:		  int k8, int k9, int k10) {
       15:   23:  int* k = malloc(10 * sizeof(int));
       15:   24:  k[0] = k1;
       15:   25:  k[1] = k2;
       15:   26:  k[2] = k3;
       15:   27:  k[3] = k4;
       15:   28:  k[4] = k5;
       15:   29:  k[5] = k6;
       15:   30:  k[6] = k7;
       15:   31:  k[7] = k8;
       15:   32:  k[8] = k9;
       15:   33:  k[9] = k10;
       15:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 2910 returned 100% blocks executed 98%
     2910:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     2910:   38:		   struct gameState *state) {
        -:   39:
     2910:   40:  int i;
     2910:   41:  int j;
     2910:   42:  int it;			
        -:   43:  //set up random number generator
     2910:   44:  SelectStream(1);
     2910:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     5820:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 2%
branch  3 taken 98%
        -:   49:    {
       45:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2865:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    62130:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   620580:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   535935:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 1%
branch  3 taken 99%
        -:   62:	    {
       45:   63:	      return -1;
        -:   64:	    }
   282045:   65:        }
    28200:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2820:   73:  if (numPlayers == 2)
branch  0 taken 98%
branch  1 taken 2%
        -:   74:    {
     2760:   75:      state->supplyCount[curse] = 10;
     2760:   76:    }
       60:   77:  else if (numPlayers == 3)
branch  0 taken 50%
branch  1 taken 50%
        -:   78:    {
       30:   79:      state->supplyCount[curse] = 20;
       30:   80:    }
        -:   81:  else
        -:   82:    {
       30:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2820:   87:  if (numPlayers == 2)
branch  0 taken 98%
branch  1 taken 2%
        -:   88:    {
     2760:   89:      state->supplyCount[estate] = 8;
     2760:   90:      state->supplyCount[duchy] = 8;
     2760:   91:      state->supplyCount[province] = 8;
     2760:   92:    }
        -:   93:  else
        -:   94:    {
       60:   95:      state->supplyCount[estate] = 12;
       60:   96:      state->supplyCount[duchy] = 12;
       60:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2820:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2820:  102:  state->supplyCount[silver] = 40;
     2820:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   118440:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   931500:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   437505:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    53550:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
     5520:  115:		  if (numPlayers == 2){ 
branch  0 taken 98%
branch  1 taken 2%
     5400:  116:		    state->supplyCount[i] = 8; 
     5400:  117:		  }
      120:  118:		  else{ state->supplyCount[i] = 12; }
     5520:  119:		}
        -:  120:	      else
        -:  121:		{
    22635:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    28155:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   409350:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   409350:  130:	}
        -:  131:
    56400:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    17100:  138:  for (i = 0; i < numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33%
     5730:  139:      state->deckCount[i] = 0;
    45840:  140:      for (j = 0; j < 3; j++)	{
branch  0 taken 75%
branch  1 taken 25%
    17190:  141:		state->deck[i][j] = estate;
    17190:  142:		state->deckCount[i]++;
    17190:  143:     }
    91680:  144:      for (j = 3; j < 10; j++)	{
branch  0 taken 88%
branch  1 taken 13%
    40110:  145:		state->deck[i][j] = copper;
    40110:  146:		state->deckCount[i]++;		
    40110:  147:	 }
     5730:  148:  }
        -:  149:
        -:  150:  //shuffle player decks
    17100:  151:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  152:    {
     5730:  153:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  154:	{
    #####:  155:	  return -1;
        -:  156:	}
     5730:  157:    }
        -:  158:
        -:  159:  //draw player hands
    17100:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  161:    {  
        -:  162:      //initialize hand size to zero
     5730:  163:      state->handCount[i] = 0;
     5730:  164:      state->discardCount[i] = 0;
        -:  165:      //draw 5 cards
        -:  166:      // for (j = 0; j < 5; j++)
        -:  167:      //	{
        -:  168:      //	  drawCard(i, state);
        -:  169:      //	}
     5730:  170:    }
        -:  171:  
        -:  172:  //set embargo tokens to 0 for all supply piles
   157920:  173:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  174:    {
    76140:  175:      state->embargoTokens[i] = 0;
    76140:  176:    }
        -:  177:
        -:  178:  //initialize first player's turn
     2820:  179:  state->outpostPlayed = 0;
     2820:  180:  state->phase = 0;
     2820:  181:  state->numActions = 1;
     2820:  182:  state->numBuys = 1;
     2820:  183:  state->playedCardCount = 0;
     2820:  184:  state->whoseTurn = 0;
     2820:  185:  state->handCount[state->whoseTurn] = 0;
        -:  186:  //int it; move to top
        -:  187:
        -:  188:  //Moved draw cards to here, only drawing at the start of a turn
    33840:  189:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
    14100:  190:    drawCard(state->whoseTurn, state);
    14100:  191:  }
        -:  192:
     2820:  193:  updateCoins(state->whoseTurn, state, 0);
        -:  194:
     2820:  195:  return 0;
     2910:  196:}
        -:  197:
function shuffle called 5790 returned 100% blocks executed 100%
     5790:  198:int shuffle(int player, struct gameState *state) {
        -:  199: 
        -:  200:
     5790:  201:  int newDeck[MAX_DECK];
     5790:  202:  int newDeckPos = 0;
     5790:  203:  int card;
     5790:  204:  int i;
        -:  205:
     5790:  206:  if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
       15:  207:    return -1;
     5775:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
    69210:  211:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
    57660:  212:    card = floor(Random() * state->deckCount[player]);
    57660:  213:    newDeck[newDeckPos] = state->deck[player][card];
    57660:  214:    newDeckPos++;
   403350:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
   144015:  216:      state->deck[player][i] = state->deck[player][i+1];
   144015:  217:    }
    57660:  218:    state->deckCount[player]--;
    57660:  219:  }
   126870:  220:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
    57660:  221:    state->deck[player][i] = newDeck[i];
    57660:  222:    state->deckCount[player]++;
    57660:  223:  }
        -:  224:
     5775:  225:  return 0;
     5790:  226:}
        -:  227:
function playCard called 60 returned 100% blocks executed 83%
       60:  228:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  229:{	
       60:  230:  int card;
       60:  231:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  232:
        -:  233:  //check if it is the right phase
       60:  234:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  235:    {
    #####:  236:      return -1;
        -:  237:    }
        -:  238:	
        -:  239:  //check if player has enough actions
       60:  240:  if ( state->numActions < 1 )
branch  0 taken 50%
branch  1 taken 50%
        -:  241:    {
       30:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //get card played
       30:  246:  card = handCard(handPos, state);
        -:  247:	
        -:  248:  //check if selected card is an action
       45:  249:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50%
branch  1 taken 50%
branch  2 taken 0%
branch  3 taken 100%
        -:  250:    {
       15:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //play card
       15:  255:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //reduce number of actions
       15:  261:  state->numActions--;
        -:  262:
        -:  263:  //update coins (Treasure cards may be added with card draws)
       15:  264:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  265:	
       15:  266:  return 0;
       60:  267:}
        -:  268:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  269:int buyCard(int supplyPos, struct gameState *state) {
    #####:  270:  int who;
        -:  271:  if (DEBUG){
        -:  272:    printf("Entering buyCard...\n");
        -:  273:  }
        -:  274:
        -:  275:  // I don't know what to do about the phase thing.
        -:  276:
    #####:  277:  who = state->whoseTurn;
        -:  278:
    #####:  279:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  280:    if (DEBUG)
        -:  281:      printf("You do not have any buys left\n");
    #####:  282:    return -1;
    #####:  283:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("There are not any of that type of card left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  288:    if (DEBUG) 
        -:  289:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  290:    return -1;
        -:  291:  } else {
    #####:  292:    state->phase=1;
        -:  293:    //state->supplyCount[supplyPos]--;
    #####:  294:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  295:  
    #####:  296:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  297:    state->numBuys--;
        -:  298:    if (DEBUG)
        -:  299:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  300:  }
        -:  301:
        -:  302:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  303:  //state->discardCount[who]++;
        -:  304:    
    #####:  305:  return 0;
    #####:  306:}
        -:  307:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  308:int numHandCards(struct gameState *state) {
    #####:  309:  return state->handCount[ whoseTurn(state) ];
        -:  310:}
        -:  311:
function handCard called 30 returned 100% blocks executed 100%
       30:  312:int handCard(int handPos, struct gameState *state) {
       30:  313:  int currentPlayer = whoseTurn(state);
       30:  314:  return state->hand[currentPlayer][handPos];
        -:  315:}
        -:  316:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  317:int supplyCount(int card, struct gameState *state) {
    #####:  318:  return state->supplyCount[card];
        -:  319:}
        -:  320:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  321:int fullDeckCount(int player, int card, struct gameState *state) {
    #####:  322:  int i;
    #####:  323:  int count = 0;
        -:  324:
    #####:  325:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  326:    {
    #####:  327:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  328:    }
        -:  329:
    #####:  330:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  331:    {
    #####:  332:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  336:    {
    #####:  337:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  338:    }
        -:  339:
    #####:  340:  return count;
        -:  341:}
        -:  342:
function whoseTurn called 135 returned 100% blocks executed 100%
      135:  343:int whoseTurn(struct gameState *state) {
      135:  344:  return state->whoseTurn;
        -:  345:}
        -:  346:
function endTurn called 60 returned 100% blocks executed 92%
       60:  347:int endTurn(struct gameState *state) {
       60:  348:  int k;
       60:  349:  int i;
       60:  350:  int currentPlayer = whoseTurn(state);
        -:  351:  
        -:  352:  //Discard hand
      930:  353:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 87%
branch  1 taken 13%
      405:  354:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      405:  355:    state->hand[currentPlayer][i] = -1;//Set card to -1
      405:  356:  }
       60:  357:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  358:    
        -:  359:  //Code for determining the player
       60:  360:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 100%
branch  1 taken 0%
       60:  361:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       60:  362:  }
        -:  363:  else{
    #####:  364:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  365:  }
        -:  366:
       60:  367:  state->outpostPlayed = 0;
       60:  368:  state->phase = 0;
       60:  369:  state->numActions = 1;
       60:  370:  state->coins = 0;
       60:  371:  state->numBuys = 1;
       60:  372:  state->playedCardCount = 0;
       60:  373:  state->handCount[state->whoseTurn] = 0;
        -:  374:
        -:  375:  //int k; move to top
        -:  376:  //Next player draws hand
      720:  377:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
      300:  378:    drawCard(state->whoseTurn, state);//Draw a card
      300:  379:  }
        -:  380:
        -:  381:  //Update money
       60:  382:  updateCoins(state->whoseTurn, state , 0);
        -:  383:
       60:  384:  return 0;
        -:  385:}
        -:  386:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  387:int isGameOver(struct gameState *state) {
    #####:  388:  int i;
    #####:  389:  int j;
        -:  390:	
        -:  391:  //if stack of Province cards is empty, the game ends
    #####:  392:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  393:    {
    #####:  394:      return 1;
        -:  395:    }
        -:  396:
        -:  397:  //if three supply pile are at 0, the game ends
    #####:  398:  j = 0;
    #####:  399:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  400:    {
    #####:  401:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  402:	{
    #####:  403:	  j++;
    #####:  404:	}
    #####:  405:    }
    #####:  406:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  407:    {
    #####:  408:      return 1;
        -:  409:    }
        -:  410:
    #####:  411:  return 0;
    #####:  412:}
        -:  413:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  414:int scoreFor (int player, struct gameState *state) {
        -:  415:
    #####:  416:  int i;
    #####:  417:  int score = 0;
    #####:  418:  int total_cards; //added to fix bug
    #####:  419:  int total_gardens = 0; //added to fix bug
        -:  420:  
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  429:     // if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); }; code is wrong
    #####:  430:	  if (state->hand[player][i] == gardens) { total_gardens += 1; }; 
branch  0 never executed
branch  1 never executed
    #####:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  441:      //if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); }; code is wrong
    #####:  442:	  if (state->discard[player][i] == gardens) { total_gardens += 1; }; 
branch  0 never executed
branch  1 never executed
    #####:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->deckCount[player]; i++) //error here - fixed for testing - was discardCount[player]
branch  0 never executed
branch  1 never executed
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
        -:  453:      //if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); }; code is wrong
    #####:  454:	  if (state->deck[player][i] == gardens) { total_gardens += 1; }; 
branch  0 never executed
branch  1 never executed
    #####:  455:    }
    #####:  456:  total_cards = state->deckCount[player] + state->discardCount[player] + state->deckCount[player];
    #####:  457:  score = score + (total_gardens * (total_cards/10));
        -:  458:  
    #####:  459:  return score;
        -:  460:}
        -:  461:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  462:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    #####:  463:  int i;	
    #####:  464:  int j;
    #####:  465:  int highScore;
    #####:  466:  int currentPlayer;
        -:  467:
        -:  468:  //get score for each player
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
        -:  471:      //set unused player scores to -9999
    #####:  472:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  473:	{
    #####:  474:	  players[i] = -9999;
    #####:  475:	}
        -:  476:      else
        -:  477:	{
    #####:  478:	  players[i] = scoreFor (i, state);
        -:  479:	}
    #####:  480:    }
        -:  481:
        -:  482:  //find highest score
    #####:  483:  j = 0;
    #####:  484:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  487:	{
    #####:  488:	  j = i;
    #####:  489:	}
    #####:  490:    }
    #####:  491:  highScore = players[j];
        -:  492:
        -:  493:  //add 1 to players who had less turns
    #####:  494:  currentPlayer = whoseTurn(state);
    #####:  495:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  498:	{
    #####:  499:	  players[i]++;
    #####:  500:	}
    #####:  501:    }
        -:  502:
        -:  503:  //find new highest score
    #####:  504:  j = 0;
    #####:  505:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  506:    {
    #####:  507:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  508:	{
    #####:  509:	  j = i;
    #####:  510:	}
    #####:  511:    }
    #####:  512:  highScore = players[j];
        -:  513:
        -:  514:  //set winners in array to 1 and rest to 0
    #####:  515:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  516:    {
    #####:  517:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  518:	{
    #####:  519:	  players[i] = 1;
    #####:  520:	}
        -:  521:      else
        -:  522:	{
    #####:  523:	  players[i] = 0;
        -:  524:	}
    #####:  525:    }
        -:  526:
    #####:  527:  return 0;
        -:  528:}
        -:  529:
function drawCard called 14805 returned 100% blocks executed 91%
    14805:  530:int drawCard(int player, struct gameState *state)
    14805:  531:{	int count;
    14805:  532:  int deckCounter;
    14805:  533:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  534:    
        -:  535:    //Step 1 Shuffle the discard pile back into a deck
       45:  536:    int i;
        -:  537:    //Move discard to deck
      810:  538:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 89%
branch  1 taken 11%
      360:  539:      state->deck[player][i] = state->discard[player][i];
      360:  540:      state->discard[player][i] = -1;
      360:  541:    }
        -:  542:
       45:  543:    state->deckCount[player] = state->discardCount[player];
       45:  544:    state->discardCount[player] = 0;//Reset discard
        -:  545:
        -:  546:    //Shufffle the deck
       45:  547:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  548:   
        -:  549:    if (DEBUG){//Debug statements
        -:  550:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  551:    }
        -:  552:    
       45:  553:    state->discardCount[player] = 0;
        -:  554:
        -:  555:    //Step 2 Draw Card
       45:  556:    count = state->handCount[player];//Get current player's hand count
        -:  557:    
        -:  558:    if (DEBUG){//Debug statements
        -:  559:      printf("Current hand count: %d\n", count);
        -:  560:    }
        -:  561:    
       45:  562:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  563:
       45:  564:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  565:      return -1;
        -:  566:
       45:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       45:  568:    state->deckCount[player]--;
       45:  569:    state->handCount[player]++;//Increment hand count
       45:  570:  }
        -:  571:
        -:  572:  else{
    14760:  573:    int count = state->handCount[player];//Get current hand count for player
    14760:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    14760:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    14760:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    14760:  581:    state->deckCount[player]--;
    14760:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    14805:  585:  return 0;
    14805:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
    #####:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function zzzadventurercardplay called 45 returned 100% blocks executed 100%
       45:  651:void zzzadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
       45:  652:		int temphand[MAX_HAND], int z, struct gameState* state) {
      225:  653:	while (drawntreasure < 2) {
branch  0 taken 75%
branch  1 taken 25%
      135:  654:		if (state->deckCount[currentPlayer] < 1) {
branch  0 taken 11%
branch  1 taken 89%
        -:  655:			//if the deck is empty we need to shuffle discard and add to deck
       15:  656:			shuffle(currentPlayer, state);
       15:  657:		}
      135:  658:		drawCard(currentPlayer, state);		
      135:  659:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
        -:  660:				- 1]; //top card of hand is most recently drawn card.
        -:  661:		//printf("card drawn:  %d ", cardDrawn); //added for debugging random tester		
      180:  662:		if (cardDrawn == copper || cardDrawn == gold) //silver was removed for assignment 2, temporarily put back for assignment 3, removed again on 11/10/14 for assignment #5
branch  0 taken 33%
branch  1 taken 67%
branch  2 taken 0%
branch  3 taken 100%
       90:  663:			drawntreasure++;
        -:  664:		else {
       45:  665:			temphand[z] = cardDrawn;
       45:  666:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       45:  667:			state->discardCount[currentPlayer]++;  //added for problem found by random tester 10/29/14
       45:  668:			z++;
        -:  669:		}
      135:  670:	}
      135:  671:	while (z - 1 >= 0) {
branch  0 taken 50%
branch  1 taken 50%
        -:  672:		//discardCard(z-1, currentPlayer, state, 0);
        -:  673:		//discardCard(handPos, currentPlayer, state, 0);
       45:  674:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
        -:  675:				temphand[z - 1]; // discard all cards in play that have been drawn
       45:  676:		z = z - 1;		
       45:  677:	}
       45:  678:}
        -:  679:
function zzzcouncilroomcardplay called 30 returned 100% blocks executed 100%
       30:  680:void zzzcouncilroomcardplay(int i, int currentPlayer, int handPos,
       30:  681:		struct gameState* state) {
        -:  682:	//+4 Cards
      300:  683:	for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20%
      120:  684:		drawCard(currentPlayer, state);
      120:  685:	}
        -:  686:	//+1 Buy
       30:  687:	state->numBuys++;
        -:  688:	//Each other player draws a card
      180:  689:	for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33%
       60:  690:		if (i != currentPlayer) {
branch  0 taken 50%
branch  1 taken 50%
       30:  691:			drawCard(i, state);
       30:  692:		}
       60:  693:	}
        -:  694:	//put played card in played card pile
       30:  695:	discardCard(handPos, currentPlayer, state, 0);
       30:  696:}
        -:  697:
function zzzfeastcardplay called 0 returned 0% blocks executed 0%
    #####:  698:void zzzfeastcardplay(int i, int currentPlayer, int temphand[MAX_HAND], int x,
    #####:  699:		int choice1, struct gameState* state) {
        -:  700:	//gain card with cost up to 5
        -:  701:	//Backup hand
    #####:  702:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  703:		temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  704:		state->hand[currentPlayer][i] = -1; //Set to nothing
    #####:  705:	}
        -:  706:	//Backup hand
        -:  707:	//Update Coins for Buy
    #####:  708:	updateCoins(currentPlayer, state, 5);
    #####:  709:	x = 1; //Condition to loop on
    #####:  710:	while (x == 1) { //Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:		if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  712:			if (DEBUG)
        -:  713:				printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:			if (DEBUG) {
        -:  716:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:			}
    #####:  718:		} else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  719:			printf("That card is too expensive!\n");
        -:  720:
        -:  721:			if (DEBUG) {
        -:  722:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:			}
    #####:  724:		} else {
        -:  725:
        -:  726:			if (DEBUG) {
        -:  727:				printf("Deck Count: %d\n",
        -:  728:						state->handCount[currentPlayer]
        -:  729:								+ state->deckCount[currentPlayer]
        -:  730:								+ state->discardCount[currentPlayer]);
        -:  731:			}
        -:  732:
    #####:  733:			gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  734:			x = 0; //No more buying cards
        -:  735:
        -:  736:			if (DEBUG) {
        -:  737:				printf("Deck Count: %d\n",
        -:  738:						state->handCount[currentPlayer]
        -:  739:								+ state->deckCount[currentPlayer]
        -:  740:								+ state->discardCount[currentPlayer]);
        -:  741:			}
        -:  742:
        -:  743:		}
    #####:  744:	}
        -:  745:	//Reset Hand
    #####:  746:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  747:		state->hand[currentPlayer][i] = temphand[i];
    #####:  748:		temphand[i] = -1;
    #####:  749:	}
    #####:  750:}
        -:  751:
function zzzsmithycardplay called 30 returned 100% blocks executed 100%
       30:  752:void zzzsmithycardplay(int i, int currentPlayer, int handPos,
       30:  753:		struct gameState* state) {
        -:  754:	//+3 Cards
      240:  755:	for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25%
       90:  756:		drawCard(currentPlayer, state);
       90:  757:	}
        -:  758:	//discard card from hand
       30:  759:	discardCard(handPos, currentPlayer, state, 1);  //the trashFlag should be set to 1 here as the bug but in
       30:  760:}													//order to complete assignment 3 it is set to 0, set back to 1 on 11/10/14 for assignment 5
        -:  761:
function zzzvillagecardplay called 30 returned 100% blocks executed 100%
       30:  762:void zzzvillagecardplay(int currentPlayer, int handPos, struct gameState* state) {
        -:  763:	//+1 Card
       30:  764:	drawCard(currentPlayer, state);
        -:  765:	//+2 Actions
       30:  766:	state->numActions = state->numActions + 2;
        -:  767:	//discard played card from hand
       30:  768:	discardCard(handPos, currentPlayer, state, 0);
       30:  769:}
        -:  770:
function zzzoutpostcardplay called 0 returned 0% blocks executed 0%
    #####:  771:void zzzoutpostcardplay(int currentPlayer, int handPos, struct gameState* state) {
        -:  772:    //set outpost flag
    #####:  773:    state->outpostPlayed++;
        -:  774:			
        -:  775:    //discard card
    #####:  776:    discardCard(handPos, currentPlayer, state, 0);	
    #####:  777:}
        -:  778:      
function zzzgreathallcardplay called 0 returned 0% blocks executed 0%
    #####:  779:void zzzgreathallcardplay(int currentPlayer, int handPos, struct gameState* state) {
        -:  780:	//+1 Card
    #####:  781:    drawCard(currentPlayer, state);
        -:  782:			
        -:  783:    //+2 Actions
    #####:  784:    state->numActions = state->numActions + 2;
        -:  785:			
        -:  786:    //discard card from hand
    #####:  787:    discardCard(handPos, currentPlayer, state, 0);
    #####:  788:}
        -:  789:
function zzzseahagcardplay called 0 returned 0% blocks executed 0%
    #####:  790:void zzzseahagcardplay(int i, int currentPlayer, struct gameState* state){
    #####:  791:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  792:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  793:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:  794:			state->deckCount[i]--;
    #####:  795:			state->discardCount[i]++;
    #####:  796:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####:  797:		}
    #####:  798:    }
    #####:  799:} 
        -:  800:
function zzzsalvagercardplay called 0 returned 0% blocks executed 0%
    #####:  801:void zzzsalvagercardplay(int choice1, int currentPlayer, int handPos, struct gameState* state) {
        -:  802:    //+1 buy
    #####:  803:    state->numBuys++;
        -:  804:			
    #####:  805:		if (choice1) {
branch  0 never executed
branch  1 never executed
        -:  806:			//gain coins equal to trashed card 
    #####:  807:			state->coins = state->coins + getCost( handCard(choice1, state) + 1 );
        -:  808:			//trash card
    #####:  809:			discardCard(choice1, currentPlayer, state, 1);	
    #####:  810:		}
        -:  811:			
        -:  812:    //discard card
    #####:  813:    discardCard(handPos, currentPlayer, state, 0);
    #####:  814:}  
        -:  815:
function zzzminioncardplay called 0 returned 0% blocks executed 0%
    #####:  816:void zzzminioncardplay(int i, int j, int choice1, int choice2, int currentPlayer, int handPos, struct gameState* state) {
        -:  817:    //+1 action
    #####:  818:    state->numActions++;
        -:  819:			
        -:  820:    //discard card from hand
    #####:  821:    discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
    #####:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
    #####:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
    #####:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
    #####:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
    #####:  859:			}
    #####:  860:		    }
    #####:  861:		}
    #####:  862:	    }
        -:  863:				
    #####:  864:	}
    #####:  865: }     
        -:  866:
function cardEffect called 15 returned 100% blocks executed 2%
       15:  867:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  868:{
       15:  869:  int i;
       15:  870:  int j;
       15:  871:  int k;
       15:  872:  int x;
       15:  873:  int index;
       15:  874:  int currentPlayer = whoseTurn(state);
       15:  875:  int nextPlayer = currentPlayer + 1;
        -:  876:
       15:  877:  int tributeRevealedCards[2] = {-1, -1};
       15:  878:  int temphand[MAX_HAND];// moved above the if statement
       15:  879:  int drawntreasure=0;
       15:  880:  int cardDrawn;
       15:  881:  int z = 0;// this is the counter for the temp hand
       15:  882:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  883:    nextPlayer = 0;
    #####:  884:  }
        -:  885:  
        -:  886:	
        -:  887:  //uses switch to select card and perform actions
       15:  888:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  889:    {
        -:  890:    case adventurer:
       15:  891:		zzzadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z,
        -:  892:				state);
       15:  893:      return 0;
        -:  894:			
        -:  895:    case council_room:
        -:  896:      //+4 Cards
    #####:  897:		zzzcouncilroomcardplay(i, currentPlayer, handPos, state);
    #####:  898:      return 0;
        -:  899:			
        -:  900:    case feast:
        -:  901:      //gain card with cost up to 5
        -:  902:      //Backup hand
    #####:  903:		zzzfeastcardplay(i, currentPlayer, temphand, x, choice1, state);
        -:  904:      //Reset Hand
        -:  905:      			
    #####:  906:      return 0;
        -:  907:			
        -:  908:    case gardens:
    #####:  909:      return -1;
        -:  910:			
        -:  911:    case mine:
    #####:  912:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  913:
    #####:  914:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:		
    #####:  919:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 2, currentPlayer);
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
    #####:  940:	      break;
        -:  941:	    }
    #####:  942:	}
        -:  943:			
    #####:  944:      return 0;
        -:  945:			
        -:  946:    case remodel:
    #####:  947:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  948:
    #####:  949:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  return -1;
        -:  952:	}
        -:  953:
    #####:  954:      gainCard(choice2, state, 0, currentPlayer);
        -:  955:
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
        -:  958:
        -:  959:      //discard trashed card
    #####:  960:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	{
    #####:  962:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      discardCard(i, currentPlayer, state, 0);			
    #####:  965:	      break;
        -:  966:	    }
    #####:  967:	}
        -:  968:
        -:  969:
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case smithy:
        -:  973:      //+3 Cards
    #####:  974:		zzzsmithycardplay(i, currentPlayer, handPos, state);
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case village:
        -:  978:      //+1 Card
    #####:  979:		zzzvillagecardplay(currentPlayer, handPos, state);
    #####:  980:      return 0;
        -:  981:		
        -:  982:    case baron:
    #####:  983:      state->numBuys++;//Increase buys by 1!
    #####:  984:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  985:	int p = 0;//Iterator for hand!
    #####:  986:	int card_not_discarded = 1;//Flag for discard set!
    #####:  987:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  988:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  989:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  990:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  991:	    state->discardCount[currentPlayer]++;
    #####:  992:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  993:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  994:	    }
    #####:  995:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  996:	    state->handCount[currentPlayer]--;
    #####:  997:	    card_not_discarded = 0;//Exit the loop
    #####:  998:	  }
    #####:  999:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1000:	    if(DEBUG) {
        -: 1001:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1002:	      printf("Must gain an estate if there are any\n");
        -: 1003:	    }
    #####: 1004:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1005:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1006:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1007:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1008:		isGameOver(state);
    #####: 1009:	      }
    #####: 1010:	    }
    #####: 1011:	    card_not_discarded = 0;//Exit the loop
    #####: 1012:	  }
        -: 1013:			    
        -: 1014:	  else{
    #####: 1015:	    p++;//Next card
        -: 1016:	  }
    #####: 1017:	}
    #####: 1018:      }
        -: 1019:			    
        -: 1020:      else{
    #####: 1021:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1023:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1024:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:	    isGameOver(state);
    #####: 1026:	  }
    #####: 1027:	}
        -: 1028:      }
        -: 1029:	    
        -: 1030:      
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case great_hall:
        -: 1034:      //+1 Card     
        -: 1035:      //+1 Actions  	
        -: 1036:      //discard card from hand      
    #####: 1037:	  zzzgreathallcardplay(currentPlayer, handPos, state);
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case minion:
    #####: 1041:      zzzminioncardplay(i, j, choice1, choice2, currentPlayer, handPos, state);
    #####: 1042:      return 0;
        -: 1043:		
        -: 1044:    case steward:
    #####: 1045:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1046:	{
        -: 1047:	  //+2 cards
    #####: 1048:	  drawCard(currentPlayer, state);
    #####: 1049:	  drawCard(currentPlayer, state);
    #####: 1050:	}
    #####: 1051:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
        -: 1053:	  //+2 coins
    #####: 1054:	  state->coins = state->coins + 2;
    #####: 1055:	}
        -: 1056:      else
        -: 1057:	{
        -: 1058:	  //trash 2 cards in hand
    #####: 1059:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1060:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1061:	}
        -: 1062:			
        -: 1063:      //discard card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case tribute:
    #####: 1068:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1069:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1070:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:	  state->deckCount[nextPlayer]--;
    #####: 1072:	}
    #####: 1073:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1074:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1075:	  state->discardCount[nextPlayer]--;
    #####: 1076:	}
        -: 1077:	else{
        -: 1078:	  //No Card to Reveal
        -: 1079:	  if (DEBUG){
        -: 1080:	    printf("No cards to reveal\n");
        -: 1081:	  }
        -: 1082:	}
    #####: 1083:      }
        -: 1084:	    
        -: 1085:      else{
    #####: 1086:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1087:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1088:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1089:	    state->deckCount[nextPlayer]++;
    #####: 1090:	    state->discard[nextPlayer][i] = -1;
    #####: 1091:	    state->discardCount[nextPlayer]--;
    #####: 1092:	  }
        -: 1093:			    
    #####: 1094:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1095:	} 
    #####: 1096:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1097:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1098:	state->deckCount[nextPlayer]--;
    #####: 1099:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1100:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1101:	state->deckCount[nextPlayer]--;
        -: 1102:      }    
        -: 1103:		       
    #####: 1104:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1105:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1106:	state->playedCardCount++;
    #####: 1107:	tributeRevealedCards[1] = -1;
    #####: 1108:      }
        -: 1109:
    #####: 1110:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1111:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1112:	  state->coins += 2;
    #####: 1113:	}
        -: 1114:		    
    #####: 1115:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1116:	  drawCard(currentPlayer, state);
    #####: 1117:	  drawCard(currentPlayer, state);
    #####: 1118:	}
        -: 1119:	else{//Action Card
    #####: 1120:	  state->numActions = state->numActions + 2;
        -: 1121:	}
    #####: 1122:      }
        -: 1123:	    
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case ambassador:
    #####: 1127:      j = 0;		//used to check if player has enough cards to discard
        -: 1128:
    #####: 1129:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1130:	{
    #####: 1131:	  return -1;				
        -: 1132:	}
        -: 1133:
    #####: 1134:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  return -1;
        -: 1137:	}
        -: 1138:
    #####: 1139:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1142:	    {
    #####: 1143:	      j++;
    #####: 1144:	    }
    #####: 1145:	}
    #####: 1146:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;				
        -: 1149:	}
        -: 1150:
        -: 1151:      if (DEBUG) 
        -: 1152:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1153:
        -: 1154:      //increase supply count for choosen card by amount being discarded
    #####: 1155:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1156:			
        -: 1157:      //each other player gains a copy of revealed card
    #####: 1158:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:	{
    #####: 1160:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1161:	    {
    #####: 1162:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1163:	    }
    #####: 1164:	}
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:
        -: 1169:      //trash copies of cards returned to supply
    #####: 1170:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1173:	    {
    #####: 1174:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1175:		{
    #####: 1176:		  discardCard(i, currentPlayer, state, 1);
    #####: 1177:		  break;
        -: 1178:		}
    #####: 1179:	    }
    #####: 1180:	}			
        -: 1181:
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case cutpurse:
        -: 1185:
    #####: 1186:      updateCoins(currentPlayer, state, 2);
    #####: 1187:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1188:	{
    #####: 1189:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1190:	    {
    #####: 1191:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1192:		{
    #####: 1193:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1194:		    {
    #####: 1195:		      discardCard(j, i, state, 0);
    #####: 1196:		      break;
        -: 1197:		    }
    #####: 1198:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1199:		    {
    #####: 1200:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1201:			{
        -: 1202:			  if (DEBUG)
        -: 1203:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1204:			}	
    #####: 1205:		      break;
        -: 1206:		    }		
    #####: 1207:		}
        -: 1208:					
    #####: 1209:	    }
        -: 1210:				
    #####: 1211:	}				
        -: 1212:
        -: 1213:      //discard played card from hand
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1215:
    #####: 1216:      return 0;
        -: 1217:
        -: 1218:		
        -: 1219:    case embargo: 
        -: 1220:      //+2 Coins
    #####: 1221:      state->coins = state->coins + 2;
        -: 1222:			
        -: 1223:      //see if selected pile is in play
    #####: 1224:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  return -1;
        -: 1227:	}
        -: 1228:			
        -: 1229:      //add embargo token to selected supply pile
    #####: 1230:      state->embargoTokens[choice1]++;
        -: 1231:			
        -: 1232:      //trash card
    #####: 1233:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case outpost:
        -: 1237:      //set outpost flag   
        -: 1238:			
        -: 1239:      //discard card
    #####: 1240:      zzzoutpostcardplay(currentPlayer, handPos, state);
    #####: 1241:      return 0;
        -: 1242:		
        -: 1243:    case salvager:
        -: 1244:      //+1 buy      
        -: 1245:	  //gain coins equal to trashed card	  
        -: 1246:	  //trash card			
        -: 1247:      //discard card
    #####: 1248:      zzzsalvagercardplay(choice1, currentPlayer, handPos, state);
    #####: 1249:      return 0;
        -: 1250:		
        -: 1251:    case sea_hag:
    #####: 1252:      zzzseahagcardplay(i, currentPlayer, state);
    #####: 1253:      return 0;
        -: 1254:		
        -: 1255:    case treasure_map:
        -: 1256:      //search hand for another treasure_map
    #####: 1257:      index = -1;
    #####: 1258:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
    #####: 1260:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1261:	    {
    #####: 1262:	      index = i;
    #####: 1263:	      break;
        -: 1264:	    }
    #####: 1265:	}
    #####: 1266:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1267:	{
        -: 1268:	  //trash both treasure cards
    #####: 1269:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1270:	  discardCard(index, currentPlayer, state, 1);
        -: 1271:
        -: 1272:	  //gain 4 Gold cards
    #####: 1273:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1274:	    {
    #####: 1275:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1276:	    }
        -: 1277:				
        -: 1278:	  //return success
    #####: 1279:	  return 1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //no second treasure_map found in hand
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return -1;
       15: 1287:}
        -: 1288:
function discardCard called 90 returned 100% blocks executed 90%
       90: 1289:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1290:{
        -: 1291:	
        -: 1292:  //if card is not trashed, added to Played pile 
       90: 1293:  if (trashFlag < 1)
branch  0 taken 69%
branch  1 taken 31%
        -: 1294:    {
        -: 1295:      //add card to played pile
       62: 1296:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       62: 1297:      state->playedCardCount++;
       62: 1298:    }
        -: 1299:	
        -: 1300:  //set played card to -1
       90: 1301:  state->hand[currentPlayer][handPos] = -1;
        -: 1302:	
        -: 1303:  //remove card from player's hand
       90: 1304:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17%
branch  1 taken 83%
        -: 1305:    {
        -: 1306:      //reduce number of cards in hand
       15: 1307:      state->handCount[currentPlayer]--;
       15: 1308:    }
       75: 1309:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1310:    {
        -: 1311:      //reduce number of cards in hand
    #####: 1312:      state->handCount[currentPlayer]--;
    #####: 1313:    }
        -: 1314:  else 	
        -: 1315:    {
        -: 1316:      //replace discarded card with last card in hand
       75: 1317:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1318:      //set last card to -1
       75: 1319:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1320:      //reduce number of cards in hand
       75: 1321:      state->handCount[currentPlayer]--;
        -: 1322:    }
        -: 1323:	
       90: 1324:  return 0;
        -: 1325:}
        -: 1326:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1327:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1328:{
        -: 1329:  //Note: supplyPos is enum of choosen card
        -: 1330:	
        -: 1331:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1332:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1333:    {
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //added card for [whoseTurn] current player:
        -: 1338:  // toFlag = 0 : add to discard
        -: 1339:  // toFlag = 1 : add to deck
        -: 1340:  // toFlag = 2 : add to hand
        -: 1341:
    #####: 1342:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1343:    {
    #####: 1344:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1345:      state->deckCount[player]++;
    #####: 1346:    }
    #####: 1347:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1348:    {
    #####: 1349:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1350:      state->handCount[player]++;
    #####: 1351:    }
        -: 1352:  else
        -: 1353:    {
    #####: 1354:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1355:      state->discardCount[player]++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //decrease number in supply pile
    #####: 1359:  state->supplyCount[supplyPos]--;
        -: 1360:	 
    #####: 1361:  return 0;
    #####: 1362:}
        -: 1363:
function updateCoins called 10815 returned 100% blocks executed 100%
    10815: 1364:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1365:{
    10815: 1366:  int i;
        -: 1367:	
        -: 1368:  //reset coin count
    10815: 1369:  state->coins = 0;
        -: 1370:
        -: 1371:  //add coins for each Treasure card in player's hand
   121920: 1372:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18%
        -: 1373:    {
    50145: 1374:      if (state->hand[player][i] == copper)
branch  0 taken 47%
branch  1 taken 53%
        -: 1375:	{
    23415: 1376:	  state->coins += 1;
    23415: 1377:	}
    26730: 1378:      else if (state->hand[player][i] == silver)
branch  0 taken 44%
branch  1 taken 56%
        -: 1379:	{
    11880: 1380:	  state->coins += 2;
    11880: 1381:	}
    14850: 1382:      else if (state->hand[player][i] == gold)
branch  0 taken 80%
branch  1 taken 20%
        -: 1383:	{
    11880: 1384:	  state->coins += 3;
    11880: 1385:	}	
    50145: 1386:    }	
        -: 1387:
        -: 1388:  //add bonus
    10815: 1389:  state->coins += bonus;
        -: 1390:
    10815: 1391:  return 0;
        -: 1392:}
        -: 1393:
        -: 1394:
        -: 1395://end of dominion.c
        -: 1396:
        -: 1397:
