															Cam Tu Vo
															CS 362-004
					Documentation

Smithy card

/* 
A cardNumber is passed into the getCost function and enters the switch cases to return the right amount of coins needed to buy the specific card chosen. For example, if the cardNumber happens to be the Smithy card, then the amount of coins needed is 4. When the cardNumber doesn’t exist it will return -1 for invalid. 

The semicolons at above and bellow case smithy indicates that there are more cases prior before and after case smithy.
*/

int getCost(int cardNumber)
{
  switch( cardNumber ) 
  {
	: 
	:
	case smithy:
       return 4;
	:
	:
  }
  return -1;
}

/*
The next switch case is used to pick the right card and perform the actions meant for the card. For example, if the card picked is the Smithy card, then the zzzsmithycardplay() function is called to perform the correct action. After calling the function return 0 will exit switch case.
*/

switch( card ) 
{
	:
	:
	case smithy:
      //+3 Cards
      zzzsmithycardplay(i, currentPlayer, handPos, state);
      return 0;
	:
	:
}

/*
zzzsmithycardplay() function uses integers i, current player, handpos, and finally the struct object state. The int i is used for the index of the for loop to keep track of how many cards have been drawn since Smithy performs the action of adding three cards to the players hand. Inside the for loop is the drawCard() function to repeatedly get cards until three cards are drawn. Int currentPlayer tells the computer which player to added cards to. After the cards are drawn and base on the state of the game and handPos when a player made all the moves, all card on the player’s hand will be discarded by the discardCard() function.
*/

void zzzsmithycardplay(int i, int currentPlayer, int handPos,
                struct gameState* state) {
        //+3 Cards
        for (i = 0; i < 3; i++) {
                drawCard(currentPlayer, state);
        }
        //discard card from hand
        discardCard(handPos, currentPlayer, state, 0);
}

Adventurer card

/*
The following two switch statements are the same ones mentioned above in the Smithy card section, except with adventurer values and function. For example, adventurer card cost six coins and to perform, the zzzadventurercardplay() function is called instead. 
*/
int getCost(int cardNumber)
{
  switch( cardNumber ) 
  {
	:
	:
	case adventurer:
       return 6;
	:
	:
  }
  return -1;
}

switch( card ) 
{
  	case adventurer:
   		zzzadventurercardplay(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
  	return 0;
	:
	:
}

/*
zzzadventurercardplay() function has two loops. One loop draw cards into a temporary hand and search for treasure cards until it finds two of them. During the process of drawing cards from the deck it will also call the shuffle() function to shuffle the discarded pile and add to the deck for continuous drawing. When a treasure card is drawn, the variable drawntreasure  will increment by one. To know if the card drawn is a treasure card, there are or statements of whether the card is copper or silver or gold. When enough treasure cards are drawn, the second loop takes action and discard all the cards in the temporary hand. 
*/

void zzzadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn, int temphand[MAX_HAND], int z, struct gameState* state) {
	while (drawntreasure < 2) {
     	if (state->deckCount[currentPlayer] < 1) {
          	//if the deck is empty we need to shuffle discard and add to deck
               shuffle(currentPlayer, state);
          }
          drawCard(currentPlayer, state);
          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]- 1]; //top card of hand is most recently drawn card.
          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
          	drawntreasure++;
          else {
          	temphand[z] = cardDrawn;
               state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
               z++;
          }
      }
      while (z - 1 >= 0) {
      	state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
          z = z - 1;
      }
}

discardCard() method

/*
discardCard() function first checks the trashFlag integer passed in to see if it is less the one to add to the played pile. The function also checks for the whether handPos is equal to the state of hand count in order to remove cards from a player’s hand. Each action of discarding is by decrementing the handcount of the current player. 
*/

int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
{
        
  //if card is not trashed, added to Played pile 
  if (trashFlag < 1)
    {
      //add card to played pile
      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      state->playedCardCount++;
    }
        
  //set played card to -1
  state->hand[currentPlayer][handPos] = -1;
        
  //remove card from player's hand
  if ( handPos == (state->handCount[currentPlayer] - 1) )       //last card in hand array is played
    {
      //reduce number of cards in hand
      state->handCount[currentPlayer]--;
    }
  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    {
      //reduce number of cards in hand
      state->handCount[currentPlayer]--;
    }
  else  
    {
      //replace discarded card with last card in hand
      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
      //set last card to -1
      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
      //reduce number of cards in hand
      state->handCount[currentPlayer]--;
    }
        
  return 0;
}


updateCoins() method

/*
updateCoins() function has a for loop that iterates through a player’s hand to add up coin values. The con values are determined by coppering to what card it is. The copper card will add one, silver adds two, and gold adds three to the total amount of coins. If there bonuses then it gets added to the total as well. Each time the function is called the state->coins gets reset. 	
*/

int updateCoins(int player, struct gameState *state, int bonus)
{
  int i;
        
  //reset coin count
  state->coins = 0;

  //add coins for each Treasure card in player's hand
  for (i = 0; i < state->handCount[player]; i++)
    {
      if (state->hand[player][i] == copper)
        {
          state->coins += 1;
        }
      else if (state->hand[player][i] == silver)
        {
          state->coins += 2;
        }
      else if (state->hand[player][i] == gold)
        {
          state->coins += 3;
        }       
    }   

  //add bonus
  state->coins += bonus;

  return 0;
}


