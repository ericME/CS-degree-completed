Cam Tu Vo
CS 362-004
					
Refactor: mine, remodel, great_hall, baron, and steward cards
Introduced subtle bugs in smithy, adventurer, mine, and remodel functions.
/*
The process of refactoring was to find the code within cardEffect's cases for each one of the cards chosen. To make sure there are no errors, simply cut and pasted the inner parts of the cases to the the appropriate locate under the existing refactored functions. After pasting comes the naming and parameter inclusion of the function. The naming process followed in zzz__cardplay() manner and the parameters are based on the many parameters used in the actul content of the inner swith cases. 

Bugs were supposed to be suttle therefore they are simple play on increments
or different varriables replacements. 
*/
/*
Refactor mine card to its own function. 
Bug: if statement (choice2 > treasure_map || choice2 < curse)
choice2 changed to choice1 < curse.
*/
void zzzminecardplay(int i, int j, int choice1, int choice2, int handPos, int currentPlayer, struct gameState* state)
{
j = state->hand[currentPlayer][choice1];  //store card we will trash

      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
	{
	  return -1;
	}	
      if (choice2 > treasure_map || choice1 < curse)
	{
	  return -1;
	}

      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
	{
	  return -1;
	}

      gainCard(choice2, state, 2, currentPlayer);

      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);

      //discard trashed card
      for (i = 0; i < state->handCount[currentPlayer]; i++)
	{
	  if (state->hand[currentPlayer][i] == j)
	    {
	      discardCard(i, currentPlayer, state, 0);			
	      break;
	    }
	}
}

/*
Refactor remodel card to it's own function.
Bug: statement if (state->hand[currentPlayer][i] == j) will change from i to 1.
*/
void zzzremodelcardplay(int i, int j, int choice1, int choice2, int currentPlayer, int handPos, struct gameState* state)
{
 j = state->hand[currentPlayer][choice1];  //store card we will trash

      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
	{
	  return -1;
	}

      gainCard(choice2, state, 0, currentPlayer);

      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);

      //discard trashed card
      for (i = 0; i < state->handCount[currentPlayer]; i++)
	{
	  if (state->hand[currentPlayer][1] == j)
	    {
	      discardCard(i, currentPlayer, state, 0);			
	      break;
	    }
	}
}

//Refactor great_hall card to it's own function
void zzzgreat_hallcardplay(int currentPlayer, int handPos, struct gameState* state)
{
      //+1 Card
      drawCard(currentPlayer, state);
			
      //+1 Actions
      state->numActions++;
			
      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);
}

void zzzbaroncardplay (int choice1, int currentPlayer, struct gameState* state)
{
 state->numBuys++;//Increase buys by 1!
      if (choice1 > 0){//Boolean true or going to discard an estate
	int p = 0;//Iterator for hand!
	int card_not_discarded = 1;//Flag for discard set!
	while(card_not_discarded){
	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
	    state->coins += 4;//Add 4 coins to the amount of coins
	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
	    state->discardCount[currentPlayer]++;
	    for (;p < state->handCount[currentPlayer]; p++){
	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
	    }
	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
	    state->handCount[currentPlayer]--;
	    card_not_discarded = 0;//Exit the loop
	  }
	  else if (p > state->handCount[currentPlayer]){
	    if(DEBUG) {
	      printf("No estate cards in your hand, invalid choice\n");
	      printf("Must gain an estate if there are any\n");
	    }
	    if (supplyCount(estate, state) > 0){
	      gainCard(estate, state, 0, currentPlayer);
	      state->supplyCount[estate]--;//Decrement estates
	      if (supplyCount(estate, state) == 0){
		isGameOver(state);
	      }
	    }
	    card_not_discarded = 0;//Exit the loop
	  }
			    
	  else{
	    p++;//Next card
	  }
	}
      }
			    
      else{
	if (supplyCount(estate, state) > 0){
	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
	  state->supplyCount[estate]--;//Decrement Estates
	  if (supplyCount(estate, state) == 0){
	    isGameOver(state);
	  }
	}
      }
}

void zzzstewardcardplay(int choice1, int choice2, int choice3, int currentPlayer, int handPos, struct gameState* state)
{
 if (choice1 == 1)
	{
	  //+2 cards
	  drawCard(currentPlayer, state);
	  drawCard(currentPlayer, state);
	}
      else if (choice1 == 2)
	{
	  //+2 coins
	  state->coins = state->coins + 2;
	}
      else
	{
	  //trash 2 cards in hand
	  discardCard(choice2, currentPlayer, state, 1);
	  discardCard(choice3, currentPlayer, state, 1);
	}
			
      //discard card from hand
      discardCard(handPos, currentPlayer, state, 0);
}

// The changed/refactored switch cases are the mine, remodel, and great_hall cards
  switch( card ) 
	:
	:
        //Refactor mine card to it's own function 	
	case mine:
        	// call refactor mine function
		zzzminecardplay(i, j, choice1, choice2, handPos, currentPlayer, state);
	
	return 0;     	
    
	//Refactor remodel card to it's own function			
    	case remodel:
		// call refactor remodel function
     		zzzremodelcardplay(i, j, choice1, choice2, currentPlayer, handPos, state);
      	
	return 0;

	//Refactor baron card to it's own function
    	case baron:
		// call refactor baron function
     		zzzbaroncardplay (choice1, currentPlayer, state);
      	return 0;

   	// Refactor great_hall card to it's own function	
   	case great_hall:
		// call great_hall function
		zzzgreat_hallcardplay(currentPlayer, handPos, state);

      	return 0;
	:
	:
	// Refactor steward card to it's own function
	case steward:
      		// call refactor steward function
		zzzstewardcardplay(choice1, choice2, choice3, currentPlayer, handPos, state);

      	return 0;

/*
Bug: statement cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]- 1] 
will minus 2 instead of 1. 
*/
void zzzadventurercardplay(int drawntreasure, int currentPlayer, int cardDrawn,
		int temphand[MAX_HAND], int z, struct gameState* state) {
	while (drawntreasure < 2) {
		if (state->deckCount[currentPlayer] < 1) {
			//if the deck is empty we need to shuffle discard and add to deck
			shuffle(currentPlayer, state);
		}
		drawCard(currentPlayer, state);
		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]
				- 2]; //top card of hand is most recently drawn card.
		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
			drawntreasure++;
		else {
			temphand[z] = cardDrawn;
			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
			z++;
		}
	}
	while (z - 1 >= 0) {
		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
				temphand[z - 1]; // discard all cards in play that have been drawn
		z = z - 1;
	}
}

/*
Bugs: the condition in for (i = 0; i < 3; i++) changed to i = 1 instead of 0.
*/
void zzzsmithycardplay(int i, int currentPlayer, int handPos,
		struct gameState* state) {
	//+3 Cards
	for (i = 1; i < 3; i++) {
		drawCard(currentPlayer, state);
	}
	//discard card from hand
	discardCard(handPos, currentPlayer, state, 0);
}
